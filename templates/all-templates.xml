<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Creates hamcrest assertThat statement to perform assertions in tests.  'at' is short for 'assert that'." enabled="true" name="at">${staticImport:importStatic('org.junit.Assert.*', 'org.hamcrest.CoreMatchers.*')}assertThat(${actual}, is(${expected}));${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="In javadoc, surrounds the selected text in strong (bold tags). If no selected text, then just inserts the strong tags with ability to add text in between and then tab out.  'b' is short for 'bold'." enabled="true" name="b">&lt;strong&gt;${word_selection}${info}&lt;/strong&gt;${cursor}</template><template autoinsert="true" context="java-members" deleted="false" description="Creates the builder method implementation.  bm is an abbreviation for builder method." enabled="true" name="bm">public ${Builder} ${field_name}(${field_type} ${field_name})&#13;
{&#13;
	this.${field_name} = ${field_name};&#13;
	return this;&#13;
}&#13;
&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Creates the build method for the current builder.  This assumes that the builder implementation is contained within the java type that it builds. " enabled="true" name="build">public ${primary_type_name} build()&#13;
{&#13;
	return new ${primary_type_name}(this);&#13;
}</template><template autoinsert="true" context="javadoc" deleted="false" description="Javadoc template for creating a code javadoc tag." enabled="true" name="code">{@code ${code_value}}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Template for creating a private static final Java constant field.  Const is short for constant." enabled="true" name="const">private static final ${type} ${name} = ${value};${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Template for creating an empty ImmutableList from guava.  Must have guava as a dependency to the project. eil is short for 'Empty Immutable List'." enabled="true" name="eil">${import:import('com.google.common.collect.ImmutableList')}ImmutableList&lt;${type}&gt; ${emptyImmutableList} = ImmutableList.&lt;${type}&gt; of();${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Creates the statement for the equals verifier test to ensure that the hash code and equals method is tested correctly.  eqv stands for 'Equals Verifier'." enabled="true" name="eqv">EqualsVerifier.forClass(${class_under_test}.class)&#13;
                ${prefab}${cursor}.verify();${:import(nl.jqno.equalsverifier.EqualsVerifier)}&#13;
</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for javadoccing false.  This template will surround the string 'false' in a code tag so that it is monospaced in javadoc. " enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_false" name="false">{@code false}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Generates a non-javadoc comment (which should be placed before the hash code and equals methods) to indicate to future developers that the hash code and equals methods were generated to include all fields.  This is useful if additional fields were added and were not updated in the equals and hashcode, as it helps future developers identify that the new field was omitted by accident.  'genHashEqDoc' stands for 'Generate Hash Code and Equals Documentation'." enabled="true" name="genHashEqDoc">    /*&#13;
     * Generated using eclipse built-in hash-code and equals generator with all fields.&#13;
     */</template><template autoinsert="true" context="java" deleted="false" description="Creates a test case for junit 4 which expects an IllegalArgumentException to be thrown.  This template uses underscore naming conventions for tests. iaeTest stands for 'Illegal Argument Exception Test'." enabled="true" name="iaeTest">    @Test(expected = IllegalArgumentException.class) ${:import(org.junit.Test)}&#13;
    public void test${methodName}_${scenario}_throwsException()&#13;
    {&#13;
		${cursor}&#13;
    }</template><template autoinsert="true" context="java" deleted="false" description="Creates a test which ensures a field of type List on an object is truly immutable (meaning that modifications will not alter original object).  This template assumes that a builder is used to construct the object and a builder instance already in test class state and has had the required values already provided.  This also ensures that the list provided to the builder cannot be modified and affect the resulting built object.  " enabled="true" name="immutabilityTest">    @Test  &#13;
    public void test${testName}_immutabilityEnforced()  &#13;
    {  &#13;
        List&lt;String&gt; original${listName} = Arrays.asList(${item}, ${item}, ${item});  &#13;
        List&lt;String&gt; listToBeModified = new ArrayList&lt;String&gt;(original${listName});  &#13;
  &#13;
        builder.${methodCall}(listToBeModified);  &#13;
        listToBeModified.remove(0);  &#13;
  &#13;
        ${builderBuildType} ${builtObjectName} = builder.build();  &#13;
        assertThat(${builtObjectName}.${getMethodCallName}(), is(original${listName}));  &#13;
        assertThat(${builtObjectName}.${getMethodCallName}().size(), is(3));  &#13;
         &#13;
        ${builtObjectName}.${getMethodCallName}().remove(0);  &#13;
        assertThat(${builtObjectName}.${getMethodCallName}(), is(originalNicknames));  &#13;
        assertThat(${builtObjectName}.${getMethodCallName}().size(), is(3));  &#13;
    }</template><template autoinsert="true" context="java" deleted="false" description="Creates a test case for junit 4 which expects an IllegalStateException to be thrown. This template uses underscore naming conventions for tests. iseTest stands for 'Illegal State Exception Test'." enabled="true" name="iseTest">    @Test(expected = IllegalStateException.class) ${:import(org.junit.Test)}&#13;
    public void test${methodName}_${scenario}_throwsException()&#13;
    {&#13;
		${cursor}&#13;
    }</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for creating a HTML list item in javadoc.  This should be used within either a unordered (ul) or ordered (ol) html tag.  'li' is an abbreviation for 'list item'." enabled="true" name="li">&lt;li&gt;${info}&lt;/li&gt;${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Used to create a mock variable through the Mockito.mock method call (imports the method statically)." enabled="true" name="mock">${classToMock} mock${classToMock} = mock(${classToMock}.class);${:importStatic(org.mockito.Mockito.mock)}</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for creating javadoc to represent a non-null value.  The null will be placed in a code tag since it is a java literal value." enabled="true" name="nonnull">non-{@code null}${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for javadoccing null value.  The template will surround the string 'null' in a code tag so that it is monospaced in javadoc." enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_null" name="null">{@code null}${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for creating an open and closing paragraph tags for javadoc.  'p' is an abbreviation for paragraph." enabled="true" name="p">&lt;p&gt;&#13;* ${cursor}&#13;* &lt;/p&gt;</template><template autoinsert="true" context="java" deleted="false" description="This is a template for creating a private final variables or classes. 'pf' is an abbreviation for 'private final'." enabled="true" name="pf">private final ${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Template used to specify prefabricated values for performing equals-verifier tests in situations where equals verifier could not dynamically implement one of the types.  'prefabClass' is an abbreviation for 'Prefabricated Class'." enabled="true" name="prefabClass">.withPrefabValues(${prefabClass}.class, new ${prefabClass}(${args1}), new ${prefabClass}(${args2}))&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Template for suppressing warnings.  It defaults to javadoc, but additional can be added.  'sup' is an abbreviation for 'Suppress Warnings'." enabled="true" name="sup">@SuppressWarnings({ "${javadoc}" })${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Template for creating an empty junit 4 test.  This template will also import hamcrest core matchers as well as junit asserts to make them readily available for testing.  This is done with the * import approach because the intended use case is to have organize imports on during save actions.  If this is not the desired behavior, just remove the imports from the template." enabled="true" id="org.eclipse.jdt.ui.templates.test_junit4" name="test">@${testType:newType(org.junit.Test)}
public void test${methodUnderTest}_${scenario}()  
{
	${cursor}
}
${staticImport:importStatic('org.hamcrest.CoreMatchers.*', 'org.junit.Assert.*')}</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for javadoccing true. This template will surround the string 'true' in a code tag so that it is monospaced in javadoc." enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_true" name="true">{@code true}${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="Template for creating a HTML unordered list in javadoc. 'ul' is an abbreviation for 'unordered list'." enabled="true" name="ul">&lt;ul&gt;&#13;* &lt;li&gt;${info}&lt;/li&gt;${cursor}&#13;* &lt;/ul&gt;</template><template autoinsert="true" context="java" deleted="false" description="Template for mocking a method call using mockito.  This template will statically import mockito's when method." enabled="true" name="when">when(${methodCall}).thenReturn(${returnValue});${cursor}${:importStatic(org.mockito.Mockito.when)}</template></templates>